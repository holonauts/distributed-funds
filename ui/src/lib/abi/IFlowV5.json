{"abi":[{"type":"function","name":"flow","inputs":[{"name":"evaluable","type":"tuple","internalType":"struct EvaluableV2","components":[{"name":"interpreter","type":"address","internalType":"contract IInterpreterV2"},{"name":"store","type":"address","internalType":"contract IInterpreterStoreV2"},{"name":"expression","type":"address","internalType":"address"}]},{"name":"callerContext","type":"uint256[]","internalType":"uint256[]"},{"name":"signedContexts","type":"tuple[]","internalType":"struct SignedContextV1[]","components":[{"name":"signer","type":"address","internalType":"address"},{"name":"context","type":"uint256[]","internalType":"uint256[]"},{"name":"signature","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"flowTransfer","type":"tuple","internalType":"struct FlowTransferV1","components":[{"name":"erc20","type":"tuple[]","internalType":"struct ERC20Transfer[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"erc721","type":"tuple[]","internalType":"struct ERC721Transfer[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"}]},{"name":"erc1155","type":"tuple[]","internalType":"struct ERC1155Transfer[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"}]}]}],"stateMutability":"nonpayable"},{"type":"function","name":"stackToFlow","inputs":[{"name":"stack","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"flowTransfer","type":"tuple","internalType":"struct FlowTransferV1","components":[{"name":"erc20","type":"tuple[]","internalType":"struct ERC20Transfer[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]},{"name":"erc721","type":"tuple[]","internalType":"struct ERC721Transfer[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"}]},{"name":"erc1155","type":"tuple[]","internalType":"struct ERC1155Transfer[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"}]}]}],"stateMutability":"pure"},{"type":"event","name":"Initialize","inputs":[{"name":"sender","type":"address","indexed":false,"internalType":"address"},{"name":"config","type":"tuple[]","indexed":false,"internalType":"struct EvaluableConfigV3[]","components":[{"name":"deployer","type":"address","internalType":"contract IExpressionDeployerV3"},{"name":"bytecode","type":"bytes","internalType":"bytes"},{"name":"constants","type":"uint256[]","internalType":"uint256[]"}]}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"flow((address,address,address),uint256[],(address,uint256[],bytes)[])":"f83d765a","stackToFlow(uint256[])":"43b84e53"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IExpressionDeployerV3\",\"name\":\"deployer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct EvaluableConfigV3[]\",\"name\":\"config\",\"type\":\"tuple[]\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IInterpreterV2\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV2\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"}],\"internalType\":\"struct EvaluableV2\",\"name\":\"evaluable\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"callerContext\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"context\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SignedContextV1[]\",\"name\":\"signedContexts\",\"type\":\"tuple[]\"}],\"name\":\"flow\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Transfer[]\",\"name\":\"erc20\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721Transfer[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC1155Transfer[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FlowTransferV1\",\"name\":\"flowTransfer\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stack\",\"type\":\"uint256[]\"}],\"name\":\"stackToFlow\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20Transfer[]\",\"name\":\"erc20\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC721Transfer[]\",\"name\":\"erc721\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC1155Transfer[]\",\"name\":\"erc1155\",\"type\":\"tuple[]\"}],\"internalType\":\"struct FlowTransferV1\",\"name\":\"flowTransfer\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialize(address,(address,bytes,uint256[])[])\":{\"params\":{\"config\":\"The list of evaluable configs that define the flows.\",\"sender\":\"The EOA that deployed the flow contract.\"}}},\"kind\":\"dev\",\"methods\":{\"flow((address,address,address),uint256[],(address,uint256[],bytes)[])\":{\"params\":{\"callerContext\":\"The caller context to pass to the evaluable.\",\"evaluable\":\"The evaluable to evaluate.\",\"signedContexts\":\"The signed contexts to pass to the evaluable.\"},\"returns\":{\"flowTransfer\":\"The resulting flow transfer.\"}},\"stackToFlow(uint256[])\":{\"params\":{\"stack\":\"The stack of values to convert to a flow transfer.\"},\"returns\":{\"flowTransfer\":\"The resulting flow transfer.\"}}},\"title\":\"IFlowV5\",\"version\":1},\"userdoc\":{\"events\":{\"Initialize(address,(address,bytes,uint256[])[])\":{\"notice\":\"MUST be emitted when the flow contract is initialized.\"}},\"kind\":\"user\",\"methods\":{\"flow((address,address,address),uint256[],(address,uint256[],bytes)[])\":{\"notice\":\"Given an evaluable, caller context, and signed contexts, evaluate the evaluable and return the resulting flow transfer. MUST process the flow transfer atomically, either all of it succeeds or none of it succeeds. MUST revert if the evaluable is not registered with the flow contract. MUST revert if the evaluable reverts. MUST revert if the evaluable returns a stack that is malformed. MUST revert if the evaluable returns a stack that contains a token transfer that is not allowed by the flow contract (e.g. if a token is being moved from an address that is not the caller or the flow contract).\"},\"stackToFlow(uint256[])\":{\"notice\":\"Given a stack of values, convert it to a flow transfer. MUST NOT modify state but MAY revert if the stack is malformed. The intended workflow is that the interpreter contract is called to produce a stack then the stack is converted to a flow transfer struct, to allow the caller to preview a flow before actually executing it. By accepting a stack as input, the caller can preview any possible flow, not just ones that have been registered with the flow contract, and can preview flows that may not even be possible to execute due to the state of the tokens, or access gating that would exclude the caller, etc.\"}},\"notice\":\"Interface for a flow contract that does NOT require native minting or burning of itself as a token. This is the base case that all other flow interfaces model themselves after, with the addition of token minting and burning. Current functionality only allows for moving third party tokens between accounts. Token standards ERC20, ERC721, and ERC1155 are supported. The basic lifecycle of a flow is: - `Flow` is deployed as a reference implementation to be cloned, with its   initializers disabled on construction. - `Flow` is cloned and initialized with an abi encoded list of evaluable   configs that define every possible movement of tokens that can occur due   to the clone. The EOA that deployed the clone DOES NOT have any special   privileges over the clone, although they could grant themselves privileges   by flowing tokens to themselves or similar within the evaluables. Ideally   the EOA doesn't introduce \\\"admin\\\" features as it would be a security risk   to themselves and others. In the case that they do, all priviledges will   be visible in the rainlang code of the evaluable, there's no hidden   functionality that can be introduced to the clone bytecode. - Anyone can call `flow` on the clone, passing in one of the evaluables set   during initialization. If the evaluable passed by the caller does not   match an initialized evaluable, the flow MUST revert with   `UnregisteredFlow`. The entirety of the resulting stack from the evaluation   defines all the token movements that MUST occur as a result of the flow.   ANY failures during the flow MUST revert the entire flow, leaving the   state of the tokens unchanged. The structure of the stack can be thought of as a simple list of transfers. All the erc20 tokens are moved first, then the erc721 tokens, then the erc1155 tokens. Each token type is separated in the stack by a sentinel value. The sentinel is a constant, `RAIN_FLOW_SENTINEL`, that is guaranteed to not collide with any token amounts or addresses. The sentinel is also guaranteed to not collide with any other sentinels from other contexts, to the extent that we can guarantee that with raw cryptographic collision resistance. This sentinel can be thought of as similar to the null terminator in a c string, it's a value that is guaranteed to not be a valid value for the type of data it's separating. The main benefit in this context, for rainlang authors, is that they can always use the same constant value in all their rainlang code to separate the different token types, rather than needing to manually calculate the length of the tuples they're wanting to flow over in each token type (which would be very error prone). Currently every token transfer type MUST be present in every flow stack, which is awkward as it means that if you want to flow erc20 tokens, you MUST also flow erc721 and erc1155 tokens, even if you don't want to. This is a limitation of the current implementation, and will be fixed in a future version. Each individual token transfer is simply a list of values, where the values are specific to the token type. - erc20 transfers are a list of 4 values:   - address of the token contract   - address of the token sender   - address of the token recipient   - amount of tokens to transfer - erc721 transfers are a list of 4 values:   - address of the token contract   - address of the token sender   - address of the token recipient   - token id to transfer - erc1155 transfers are a list of 5 values:   - address of the token contract   - address of the token sender   - address of the token recipient   - token id to transfer   - amount of tokens to transfer The final stack is processed from the bottom up, so the first token transfer in the stack is the last one to be processed. For example, a rainlang expression that transfers 1e18 erc20 token 0xf00baa from the flow contract to the address 0xdeadbeef, and 1 erc721 token address 0x1234 and id 5678 from the address 0xdeadbeef to the flow contract, would result in the following rainlang/stack: ``` /* sentinel is always the same. */ sentinel: 0xfea74d0c9bf4a3c28f0dd0674db22a3d7f8bf259c56af19f4ac1e735b156974f, /* erc1155 transfers are first, just a sentinel as there's nothing to do */ _: sentinel, /* erc721 transfers are next, with the token id as the last value */ _: 0x1234 0xdeadbeef context<0 1>() 5678, /* erc20 transfers are last, with the amount as the last value */ _: 0xf00baa context<0 1>() 0xdeadbeef 1e18; ``` Note that for all token transfers the sender of the tokens MUST be either the flow contract itself, or the caller of the flow contract. This is to prevent the flow contract from being able to transfer tokens from arbitrary addresses without their consent. Even if some address has approved the flow contract to transfer tokens on their behalf, the flow contract MUST NOT transfer tokens from that address unless the caller of the flow contract is that address. Note that native gas movements are not supported in this version of the flow contract. This is because the current reference implementation uses `Multicall` to batch together multiple calls to the flow contract, and this involves a loop over a delegate call, which is not safe to do with native gas movements. This will be fixed in a future version of the interface where batching is handled by the flow contract itself, rather than relying on `Multicall`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/rain.flow/src/interface/unstable/IFlowV5.sol\":\"IFlowV5\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":bitwise/=lib/rain.interpreter/src/lib/bitwise/\",\":bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/\",\":caller/=lib/rain.interpreter.interface/src/lib/caller/\",\":ds-test/=lib/rain.interpreter.interface/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eval/=lib/rain.interpreter/src/lib/eval/\",\":extern/=lib/rain.interpreter/src/lib/extern/\",\":forge-std/=lib/rain.interpreter.interface/lib/forge-std/src/\",\":integrity/=lib/rain.interpreter/src/lib/integrity/\",\":ns/=lib/rain.interpreter.interface/src/lib/ns/\",\":op/=lib/rain.interpreter/src/lib/op/\",\":openzeppelin-contracts-upgradeable/=lib/rain.flow/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/rain.factory/lib/openzeppelin-contracts/contracts/\",\":parse/=lib/rain.interpreter/src/lib/parse/\",\":prb-math/=lib/rain.interpreter/lib/prb-math/src/\",\":prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/\",\":rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/\",\":rain.datacontract/=lib/rain.interpreter/lib/rain.datacontract/src/\",\":rain.erc1820/=lib/rain.interpreter/lib/rain.erc1820/src/\",\":rain.extrospection/=lib/rain.factory/lib/rain.extrospection/\",\":rain.factory/=lib/rain.factory/\",\":rain.flow/=lib/rain.flow/src/\",\":rain.interpreter.interface/=lib/rain.interpreter.interface/src/\",\":rain.interpreter/=lib/rain.interpreter/\",\":rain.intorastring/=lib/rain.interpreter/lib/\",\":rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/\",\":rain.lib.memkv/=lib/rain.interpreter/lib/rain.lib.memkv/src/\",\":rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/\",\":rain.math.fixedpoint/=lib/rain.flow/lib/rain.math.fixedpoint/src/\",\":rain.math.saturating/=lib/rain.interpreter/lib/rain.math.saturating/src/\",\":rain.metadata/=lib/rain.interpreter/lib/rain.metadata/\",\":rain.solmem/=lib/rain.interpreter.interface/lib/rain.solmem/src/\",\":sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/\",\":state/=lib/rain.interpreter/src/lib/state/\"]},\"sources\":{\"lib/rain.flow/src/error/ErrFlow.sol\":{\"keccak256\":\"0x1a73c85270b41177db2ecc3c2f1ac0069e9d9540de8121f428320dd27fe53bb0\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://84cee109a3675616bc8b193e512c01c71de9a61e38e861582728d74f8975e7cb\",\"dweb:/ipfs/QmTxNcaUWNnvVRWj3jteJ6sMWWKfadhPvpTaQcqv3EwVDN\"]},\"lib/rain.flow/src/interface/deprecated/v3/IFlowV3.sol\":{\"keccak256\":\"0xb5c3b660f0faf5e1e41d9e6dae81db23e34b8f48b952480164b3ffb8bf383096\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://f2206fe3324392de58f3773829c0e8d1918e7d2c423bf5c815da6896d2d1a54f\",\"dweb:/ipfs/QmSpujqk24wrUxSvJgmUhxd7T4kE9tAfze4sVo8ZP1CGP4\"]},\"lib/rain.flow/src/interface/deprecated/v4/IFlowV4.sol\":{\"keccak256\":\"0x29a1e88b399db28e56c62c105717995be4a6a6ab569bec7326b31fba5b896ca0\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://d1056284919d677af11b680f8e6f61c36a90ddad22aba13f8c7664de6ca6f083\",\"dweb:/ipfs/QmRfMp17AUYzLWvHEpBDsfU37LSCH6yvEvuiatWoKyG7g1\"]},\"lib/rain.flow/src/interface/unstable/IFlowV5.sol\":{\"keccak256\":\"0xb213c5ac49e0a6b736384f5c5431afd4a583d766f68368bd28ee47c11853d7f4\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://cf0fb61842961f084ba32c8fe10725c8bb16103116c44810ba4ab21efa3abebc\",\"dweb:/ipfs/QmSqizaoyHFQrNvi6jZKEftWSnj23egFWgxgyCBFMCX1YE\"]},\"lib/rain.interpreter.interface/lib/rain.solmem/src/lib/LibPointer.sol\":{\"keccak256\":\"0xcd833cbf588ec10836cdfbddd426fc14dfa145ed2e63054f6bbd06e296e698f7\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://9ce0af4045e276c5e4c352c1c435f4ecea7552192b1d99e33732c1067bea0ad7\",\"dweb:/ipfs/Qmc5NCFTwgg2AemUz9K1fPei51ivge3eUrWP8k56kF8ADG\"]},\"lib/rain.interpreter.interface/lib/rain.solmem/src/lib/LibStackSentinel.sol\":{\"keccak256\":\"0x83898b6e7654905b8ce81d9dfdd5e5c42a789bce1ad373b3bbe8727fc09481f3\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://dff9df3ecc75b94ed248ec0ab744a9827af45e744ddd543a7db2fe3a9b377906\",\"dweb:/ipfs/Qmdd6bziBgAfPrydKEeTr2vV73Kto1EsC2jEjCTBvKNPmR\"]},\"lib/rain.interpreter.interface/src/interface/IExpressionDeployerV3.sol\":{\"keccak256\":\"0xc0cfba39db04ddd5f5d8eef6216ac8829c31651546617a793aae99370525cee7\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://1bc894cf9d8148f0b2bbd23cc4f40e659cdfa42bcef61526c3337ef553a56468\",\"dweb:/ipfs/QmY8DoyyFrELDMYMu31JgnGRAJcvjtVuUFtS1UqxpzT6Wr\"]},\"lib/rain.interpreter.interface/src/interface/IInterpreterCallerV2.sol\":{\"keccak256\":\"0x2054b8b71b679dc195d902f538d79045edad6c4aa23392e7d411029b2a08d796\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://4f1963e40417396d530cead60f2be70f085ce7a47f42807e2833cdeceefc034a\",\"dweb:/ipfs/QmZThxfNuusTSWwcB9n4TqvusaqwcAEGEQfJDZ4qWbfuTW\"]},\"lib/rain.interpreter.interface/src/interface/IInterpreterStoreV2.sol\":{\"keccak256\":\"0xfd1df694f4dcf8b21df8d67716c84bad592fabef2a5e24728264d95b5ecc23bc\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://ddf4359ede27b9ed71d6440ea947bd69e98e1e0498de4552738a8acafbf83165\",\"dweb:/ipfs/QmPVdhTyPgUP6b1GrDVhiCZ2459nhzA4H9FNdJ5LjJ53ik\"]},\"lib/rain.interpreter.interface/src/interface/IInterpreterV2.sol\":{\"keccak256\":\"0x7d832d4bcbed4119efd1f1f50860e31d8cf0ef2e6141dd553965a0b01303e515\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://95bd59c181e95d0f4e7281297e056cca70f5e062d2dc6b4fb60a7fb524286ff0\",\"dweb:/ipfs/QmSAJGZuLqFkfCiTaj5fzXkyrzHvWrYfdvB3yzNJ2pyABc\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV1.sol\":{\"keccak256\":\"0x2a001152546ab44208a126f1f518da086d6d6e2310db6b987d58cf8731c5eab0\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://aa1bd59abdb21d8c16945b057e73a0d19e5d7ab910630dd91cadc195c9c705e3\",\"dweb:/ipfs/QmPHbu9bpS7L8MoUSRH7PWpvcVe4zinxTn8LCkGroiXasc\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV2.sol\":{\"keccak256\":\"0x2b8e9d48c92c2c0e874fb4d073b0cb013fb36a830e16c68657bcf65ede7d8b16\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://8de383c71dcaabb32fd9b91912bc7cba001a5a89c6f5de08b1a92447d0bebd12\",\"dweb:/ipfs/QmV1JV5ctH9cktJbYJxXvBNBePshfVB58voEUMCbgCtkhj\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterCallerV1.sol\":{\"keccak256\":\"0xb6be0766bb6f4021809b81a4f35cc43bfbceaa5e1bef6484c000d059e24e33a8\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://a9458880e68a3c6348ef10ba9de1b8942316828b8b5012bd7d20a473b69115a8\",\"dweb:/ipfs/QmbmsXPGYmPmdVTyZGWWWypvc3e1Qqw2gyTnwajBzjFsfu\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterStoreV1.sol\":{\"keccak256\":\"0x4e03ec42747b2ce6bed9f522ab11bd555f9831e39b45cb9dcbf601554ce50fb9\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://ff1978aac681dafee36aa7bc4b2470e2da5c9bc205f50f1e0fbfef9bcc75e0e9\",\"dweb:/ipfs/QmeK9q4soBCywAvtMMiw1AfJP9BYarVGNzmBaSQcQ33wMd\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV1.sol\":{\"keccak256\":\"0xcb53d0989403dbde29b4a7791ae42579f6ece55d76c5b8a18025ff1308175957\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://af4421c4406774b7a43c2cccae974d98c84c427a108cd1af0e364b39f32c604a\",\"dweb:/ipfs/Qma7HTFnZ3PNZQNk3Mz2pvG2U6EWwXDfSBx5yVv1HUUUZy\"]},\"lib/rain.interpreter.interface/src/lib/caller/LibEvaluable.sol\":{\"keccak256\":\"0x47ad37920806013d69457cf2e4d7c8fdd9791c0ee2119991467cf2a7c89888c1\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://b356f0accd4e7d930ce26a237239e8c30fc588c5125f8694acaca68cd9f49b85\",\"dweb:/ipfs/QmWyu4DmWEPPcgzpA3BDa6CRcr1E7n5SXLhX7hjvjBV8sv\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.23+commit.f704f362"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":false},{"internalType":"struct EvaluableConfigV3[]","name":"config","type":"tuple[]","components":[{"internalType":"contract IExpressionDeployerV3","name":"deployer","type":"address"},{"internalType":"bytes","name":"bytecode","type":"bytes"},{"internalType":"uint256[]","name":"constants","type":"uint256[]"}],"indexed":false}],"type":"event","name":"Initialize","anonymous":false},{"inputs":[{"internalType":"struct EvaluableV2","name":"evaluable","type":"tuple","components":[{"internalType":"contract IInterpreterV2","name":"interpreter","type":"address"},{"internalType":"contract IInterpreterStoreV2","name":"store","type":"address"},{"internalType":"address","name":"expression","type":"address"}]},{"internalType":"uint256[]","name":"callerContext","type":"uint256[]"},{"internalType":"struct SignedContextV1[]","name":"signedContexts","type":"tuple[]","components":[{"internalType":"address","name":"signer","type":"address"},{"internalType":"uint256[]","name":"context","type":"uint256[]"},{"internalType":"bytes","name":"signature","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"flow","outputs":[{"internalType":"struct FlowTransferV1","name":"flowTransfer","type":"tuple","components":[{"internalType":"struct ERC20Transfer[]","name":"erc20","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]},{"internalType":"struct ERC721Transfer[]","name":"erc721","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}]},{"internalType":"struct ERC1155Transfer[]","name":"erc1155","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}]}]}]},{"inputs":[{"internalType":"uint256[]","name":"stack","type":"uint256[]"}],"stateMutability":"pure","type":"function","name":"stackToFlow","outputs":[{"internalType":"struct FlowTransferV1","name":"flowTransfer","type":"tuple","components":[{"internalType":"struct ERC20Transfer[]","name":"erc20","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]},{"internalType":"struct ERC721Transfer[]","name":"erc721","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}]},{"internalType":"struct ERC1155Transfer[]","name":"erc1155","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}]}]}]}],"devdoc":{"kind":"dev","methods":{"flow((address,address,address),uint256[],(address,uint256[],bytes)[])":{"params":{"callerContext":"The caller context to pass to the evaluable.","evaluable":"The evaluable to evaluate.","signedContexts":"The signed contexts to pass to the evaluable."},"returns":{"flowTransfer":"The resulting flow transfer."}},"stackToFlow(uint256[])":{"params":{"stack":"The stack of values to convert to a flow transfer."},"returns":{"flowTransfer":"The resulting flow transfer."}}},"version":1},"userdoc":{"kind":"user","methods":{"flow((address,address,address),uint256[],(address,uint256[],bytes)[])":{"notice":"Given an evaluable, caller context, and signed contexts, evaluate the evaluable and return the resulting flow transfer. MUST process the flow transfer atomically, either all of it succeeds or none of it succeeds. MUST revert if the evaluable is not registered with the flow contract. MUST revert if the evaluable reverts. MUST revert if the evaluable returns a stack that is malformed. MUST revert if the evaluable returns a stack that contains a token transfer that is not allowed by the flow contract (e.g. if a token is being moved from an address that is not the caller or the flow contract)."},"stackToFlow(uint256[])":{"notice":"Given a stack of values, convert it to a flow transfer. MUST NOT modify state but MAY revert if the stack is malformed. The intended workflow is that the interpreter contract is called to produce a stack then the stack is converted to a flow transfer struct, to allow the caller to preview a flow before actually executing it. By accepting a stack as input, the caller can preview any possible flow, not just ones that have been registered with the flow contract, and can preview flows that may not even be possible to execute due to the state of the tokens, or access gating that would exclude the caller, etc."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/","bitwise/=lib/rain.interpreter/src/lib/bitwise/","bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/","caller/=lib/rain.interpreter.interface/src/lib/caller/","ds-test/=lib/rain.interpreter.interface/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","eval/=lib/rain.interpreter/src/lib/eval/","extern/=lib/rain.interpreter/src/lib/extern/","forge-std/=lib/rain.interpreter.interface/lib/forge-std/src/","integrity/=lib/rain.interpreter/src/lib/integrity/","ns/=lib/rain.interpreter.interface/src/lib/ns/","op/=lib/rain.interpreter/src/lib/op/","openzeppelin-contracts-upgradeable/=lib/rain.flow/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/rain.factory/lib/openzeppelin-contracts/contracts/","parse/=lib/rain.interpreter/src/lib/parse/","prb-math/=lib/rain.interpreter/lib/prb-math/src/","prb-test/=lib/rain.interpreter/lib/prb-math/lib/prb-test/src/","rain.chainlink/=lib/rain.interpreter/lib/rain.chainlink/src/","rain.datacontract/=lib/rain.interpreter/lib/rain.datacontract/src/","rain.erc1820/=lib/rain.interpreter/lib/rain.erc1820/src/","rain.extrospection/=lib/rain.factory/lib/rain.extrospection/","rain.factory/=lib/rain.factory/","rain.flow/=lib/rain.flow/src/","rain.interpreter.interface/=lib/rain.interpreter.interface/src/","rain.interpreter/=lib/rain.interpreter/","rain.intorastring/=lib/rain.interpreter/lib/","rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/","rain.lib.memkv/=lib/rain.interpreter/lib/rain.lib.memkv/src/","rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/","rain.math.fixedpoint/=lib/rain.flow/lib/rain.math.fixedpoint/src/","rain.math.saturating/=lib/rain.interpreter/lib/rain.math.saturating/src/","rain.metadata/=lib/rain.interpreter/lib/rain.metadata/","rain.solmem/=lib/rain.interpreter.interface/lib/rain.solmem/src/","sol.lib.binmaskflag/=lib/rain.interpreter/lib/sol.lib.binmaskflag/src/","state/=lib/rain.interpreter/src/lib/state/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/rain.flow/src/interface/unstable/IFlowV5.sol":"IFlowV5"},"evmVersion":"paris","libraries":{}},"sources":{"lib/rain.flow/src/error/ErrFlow.sol":{"keccak256":"0x1a73c85270b41177db2ecc3c2f1ac0069e9d9540de8121f428320dd27fe53bb0","urls":["bzz-raw://84cee109a3675616bc8b193e512c01c71de9a61e38e861582728d74f8975e7cb","dweb:/ipfs/QmTxNcaUWNnvVRWj3jteJ6sMWWKfadhPvpTaQcqv3EwVDN"],"license":"CAL"},"lib/rain.flow/src/interface/deprecated/v3/IFlowV3.sol":{"keccak256":"0xb5c3b660f0faf5e1e41d9e6dae81db23e34b8f48b952480164b3ffb8bf383096","urls":["bzz-raw://f2206fe3324392de58f3773829c0e8d1918e7d2c423bf5c815da6896d2d1a54f","dweb:/ipfs/QmSpujqk24wrUxSvJgmUhxd7T4kE9tAfze4sVo8ZP1CGP4"],"license":"CAL"},"lib/rain.flow/src/interface/deprecated/v4/IFlowV4.sol":{"keccak256":"0x29a1e88b399db28e56c62c105717995be4a6a6ab569bec7326b31fba5b896ca0","urls":["bzz-raw://d1056284919d677af11b680f8e6f61c36a90ddad22aba13f8c7664de6ca6f083","dweb:/ipfs/QmRfMp17AUYzLWvHEpBDsfU37LSCH6yvEvuiatWoKyG7g1"],"license":"CAL"},"lib/rain.flow/src/interface/unstable/IFlowV5.sol":{"keccak256":"0xb213c5ac49e0a6b736384f5c5431afd4a583d766f68368bd28ee47c11853d7f4","urls":["bzz-raw://cf0fb61842961f084ba32c8fe10725c8bb16103116c44810ba4ab21efa3abebc","dweb:/ipfs/QmSqizaoyHFQrNvi6jZKEftWSnj23egFWgxgyCBFMCX1YE"],"license":"CAL"},"lib/rain.interpreter.interface/lib/rain.solmem/src/lib/LibPointer.sol":{"keccak256":"0xcd833cbf588ec10836cdfbddd426fc14dfa145ed2e63054f6bbd06e296e698f7","urls":["bzz-raw://9ce0af4045e276c5e4c352c1c435f4ecea7552192b1d99e33732c1067bea0ad7","dweb:/ipfs/Qmc5NCFTwgg2AemUz9K1fPei51ivge3eUrWP8k56kF8ADG"],"license":"CAL"},"lib/rain.interpreter.interface/lib/rain.solmem/src/lib/LibStackSentinel.sol":{"keccak256":"0x83898b6e7654905b8ce81d9dfdd5e5c42a789bce1ad373b3bbe8727fc09481f3","urls":["bzz-raw://dff9df3ecc75b94ed248ec0ab744a9827af45e744ddd543a7db2fe3a9b377906","dweb:/ipfs/Qmdd6bziBgAfPrydKEeTr2vV73Kto1EsC2jEjCTBvKNPmR"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/IExpressionDeployerV3.sol":{"keccak256":"0xc0cfba39db04ddd5f5d8eef6216ac8829c31651546617a793aae99370525cee7","urls":["bzz-raw://1bc894cf9d8148f0b2bbd23cc4f40e659cdfa42bcef61526c3337ef553a56468","dweb:/ipfs/QmY8DoyyFrELDMYMu31JgnGRAJcvjtVuUFtS1UqxpzT6Wr"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/IInterpreterCallerV2.sol":{"keccak256":"0x2054b8b71b679dc195d902f538d79045edad6c4aa23392e7d411029b2a08d796","urls":["bzz-raw://4f1963e40417396d530cead60f2be70f085ce7a47f42807e2833cdeceefc034a","dweb:/ipfs/QmZThxfNuusTSWwcB9n4TqvusaqwcAEGEQfJDZ4qWbfuTW"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/IInterpreterStoreV2.sol":{"keccak256":"0xfd1df694f4dcf8b21df8d67716c84bad592fabef2a5e24728264d95b5ecc23bc","urls":["bzz-raw://ddf4359ede27b9ed71d6440ea947bd69e98e1e0498de4552738a8acafbf83165","dweb:/ipfs/QmPVdhTyPgUP6b1GrDVhiCZ2459nhzA4H9FNdJ5LjJ53ik"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/IInterpreterV2.sol":{"keccak256":"0x7d832d4bcbed4119efd1f1f50860e31d8cf0ef2e6141dd553965a0b01303e515","urls":["bzz-raw://95bd59c181e95d0f4e7281297e056cca70f5e062d2dc6b4fb60a7fb524286ff0","dweb:/ipfs/QmSAJGZuLqFkfCiTaj5fzXkyrzHvWrYfdvB3yzNJ2pyABc"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV1.sol":{"keccak256":"0x2a001152546ab44208a126f1f518da086d6d6e2310db6b987d58cf8731c5eab0","urls":["bzz-raw://aa1bd59abdb21d8c16945b057e73a0d19e5d7ab910630dd91cadc195c9c705e3","dweb:/ipfs/QmPHbu9bpS7L8MoUSRH7PWpvcVe4zinxTn8LCkGroiXasc"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV2.sol":{"keccak256":"0x2b8e9d48c92c2c0e874fb4d073b0cb013fb36a830e16c68657bcf65ede7d8b16","urls":["bzz-raw://8de383c71dcaabb32fd9b91912bc7cba001a5a89c6f5de08b1a92447d0bebd12","dweb:/ipfs/QmV1JV5ctH9cktJbYJxXvBNBePshfVB58voEUMCbgCtkhj"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterCallerV1.sol":{"keccak256":"0xb6be0766bb6f4021809b81a4f35cc43bfbceaa5e1bef6484c000d059e24e33a8","urls":["bzz-raw://a9458880e68a3c6348ef10ba9de1b8942316828b8b5012bd7d20a473b69115a8","dweb:/ipfs/QmbmsXPGYmPmdVTyZGWWWypvc3e1Qqw2gyTnwajBzjFsfu"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterStoreV1.sol":{"keccak256":"0x4e03ec42747b2ce6bed9f522ab11bd555f9831e39b45cb9dcbf601554ce50fb9","urls":["bzz-raw://ff1978aac681dafee36aa7bc4b2470e2da5c9bc205f50f1e0fbfef9bcc75e0e9","dweb:/ipfs/QmeK9q4soBCywAvtMMiw1AfJP9BYarVGNzmBaSQcQ33wMd"],"license":"CAL"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV1.sol":{"keccak256":"0xcb53d0989403dbde29b4a7791ae42579f6ece55d76c5b8a18025ff1308175957","urls":["bzz-raw://af4421c4406774b7a43c2cccae974d98c84c427a108cd1af0e364b39f32c604a","dweb:/ipfs/Qma7HTFnZ3PNZQNk3Mz2pvG2U6EWwXDfSBx5yVv1HUUUZy"],"license":"CAL"},"lib/rain.interpreter.interface/src/lib/caller/LibEvaluable.sol":{"keccak256":"0x47ad37920806013d69457cf2e4d7c8fdd9791c0ee2119991467cf2a7c89888c1","urls":["bzz-raw://b356f0accd4e7d930ce26a237239e8c30fc588c5125f8694acaca68cd9f49b85","dweb:/ipfs/QmWyu4DmWEPPcgzpA3BDa6CRcr1E7n5SXLhX7hjvjBV8sv"],"license":"CAL"}},"version":1},"id":34}